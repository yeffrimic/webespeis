<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>JáquerEspeis (Publicaciones sobre drupal-8)</title><link>http://www.jaquerespeis.org/</link><description></description><atom:link type="application/rss+xml" href="http://www.jaquerespeis.org/categories/drupal-8.xml" rel="self"></atom:link><language>es</language><lastBuildDate>Tue, 08 Aug 2017 20:05:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Drupal 8: Pseudo fields, templates and rendering images with links.</title><link>http://www.jaquerespeis.org/posts/manati-web-agencyhttps-medium-com-manati-web-agency-drupal-8-pseudo-fields-templates-and-rendering-images-with-links-8d02d083d2f/</link><dc:creator>JáquerEspeis</dc:creator><description>&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/800/1*i9Lxf4RqvuJbLRf426cb0g.png"&gt;&lt;figcaption&gt;Illustration by &lt;a href="https://medium.com/u/685ec9b9459c"&gt;Lucy Sánchez&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;em&gt;Lea este artículo en español: &lt;/em&gt;&lt;strong&gt;&lt;em&gt;Drupal 8&lt;/em&gt;:&lt;/strong&gt; &lt;a href="https://medium.com/p/40870e35970e"&gt;&lt;strong&gt;Pseudocampos, templates y render de imágenes con links.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A few days ago I started the development of a new Drupal 8 site. This site has come with a large set of interesting challenges because a lot of the required functionality is still not easy to implement. As of this moment, there are a lot of contrib modules that are in development, one of them is &lt;a href="https://www.drupal.org/project/group"&gt;&lt;em&gt;group&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Our client requires that every authenticated user can see the groups it belongs to directly from its profile. This feature is required to be done in such a way that you can see the group’s logo, and the logo has to be linked to that group page on the site. I researched alternatives with &lt;em&gt;views&lt;/em&gt; and other contrib modules, but it didn’t bear fruit.&lt;/p&gt;&lt;p&gt;I opted for the custom approach: to create a pseudo field for the users. Such field would use a template in order to print the groups the user belongs to.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Shoulders to the wheel!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;First we need to create a pseudo field. Let’s remember that pseudo fields are elements that, just like fields, we can manage from the admin interface of each entity, but the difference lies in that the element has only one function: to display information. Contrary to that, a field will store and show information entered by the users.&lt;/p&gt;&lt;p&gt;In Drupal 8 -like Drupal 7- we need to use 2 hooks to create our pseudo field for an entity: &lt;em&gt;hook_entity_extra_field_info()&lt;/em&gt; and&lt;em&gt; hook_[ENTITY NAME]_view().&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;hook_entity_extra_field_info().&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;It tells the entity that there will be a new element available to display. For our case, we’ll implement it like so:&lt;/p&gt;&lt;pre&gt;/**&lt;br&gt; * Implements hook_entity_extra_field_info().&lt;br&gt; */&lt;br&gt;function my_module_entity_extra_field_info() {&lt;br&gt;  $extra = [];&lt;br&gt;  $extra['user']['user']['display']['my_mudule_active_subsites'] = array(&lt;br&gt;    'label' =&amp;gt; new TranslatableMarkup('Active subsites'),&lt;br&gt;    'description' =&amp;gt; new TranslatableMarkup('Show the current subscribed sites by one user'),&lt;br&gt;  );&lt;br&gt;  return $extra;&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;hook_[ENTITY NAME]_view()&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;In this case, we’re interested in using &lt;em&gt;hook_user_view()&lt;/em&gt; because we’re working with the user type entity. &lt;em&gt;hook_[ENTITY NAME]_view() &lt;/em&gt;basically handles the display of each one of the elements of an entity. In this case, we’ll use it to format our pseudo field &lt;em&gt;my_mudule_active_subsites&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;For Drupal 8, the implementation of this hook varies a bit in the parameters it receives, we can find more documentation here:&lt;/p&gt;&lt;p&gt;&lt;a href="https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Entity%21entity.api.php/function/hook_entity_view/8.2.x"&gt;https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Entity%21entity.api.php/function/hook_entity_view/8.2.x&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;/**&lt;br&gt; * Implements hook_user_view().&lt;br&gt; */&lt;br&gt;function my_module_view(array &amp;amp;$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode, $langcode) {&lt;br&gt;  if ($view_mode === 'full') {&lt;br&gt;    if ($display-&amp;gt;getComponent('my_module_active_subsites')) {&lt;br&gt;      $groups = my_module_user_current_user_groups($entity);&lt;br&gt;      $groups_to_render = my_module_render_groups_images($groups);&lt;br&gt;      $build['my_module_user_active_subsites'] = [&lt;br&gt;        '#theme' =&amp;gt; 'my_module_active_subsites',&lt;br&gt;        '#groups' =&amp;gt; $groups_to_render,&lt;br&gt;      ];&lt;br&gt;    }&lt;br&gt;  }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Like the example, we’re using the variable build that we get from the reference, to assign the value to show with our pseudo field. Notice that we created a new index inside the build array, which is a render array. Inside our index we’ll use #theme to indicate that we’re going to use a template, which we’ll define further down the road, and we’ll also use a variable called #groups, which is a variable inside our template.&lt;/p&gt;&lt;p&gt;Now, an important detail: like you can see in our example, we use 2 functions to obtain both the the groups of the user and the preprocessed data ready to be printed by Drupal. The function &lt;em&gt;my_module_user_current_user_groups() &lt;/em&gt;basically returns an array of the entity type group, in which we wont delve. On the contrary, we’ll see the details of &lt;em&gt;my_module_render_groups_images()&lt;/em&gt;.&lt;/p&gt;&lt;h4&gt;my_module_render_groups_images()&lt;/h4&gt;&lt;p&gt;This function was born because of our need to wrap the images in a link, specifically a link to the entity type group. We’ll solve that this way:&lt;/p&gt;&lt;pre&gt;/**&lt;br&gt; * Helper function to render the images with a specific image style.&lt;br&gt; *&lt;br&gt; * @param array $groups&lt;br&gt; *   The entity groups with the images to render.&lt;br&gt; */&lt;br&gt;function my_module_render_groups_images(array $groups) {&lt;br&gt;  $groups_to_render = [];&lt;br&gt;  foreach ($groups as $group) {&lt;br&gt;    $group_item = new Stdclass();&lt;br&gt;    $image_id = $group-&amp;gt;field_site_logo-&amp;gt;target_id;&lt;br&gt;    if (!empty($image_id)) {&lt;br&gt;      $image_render_array = [&lt;br&gt;        '#theme' =&amp;gt; 'image_style',&lt;br&gt;        '#width' =&amp;gt; $group-&amp;gt;field_site_logo-&amp;gt;width,&lt;br&gt;        '#height' =&amp;gt; $group-&amp;gt;field_site_logo-&amp;gt;height,&lt;br&gt;        '#style_name' =&amp;gt; 'site_logo_user_profile',&lt;br&gt;        '#uri' =&amp;gt; $group-&amp;gt;field_site_logo-&amp;gt;entity-&amp;gt;uri-&amp;gt;value,&lt;br&gt;      ];&lt;br&gt;      $renderer = \Drupal::service('renderer');&lt;br&gt;      $renderer-&amp;gt;addCacheableDependency($image_render_array, $group-&amp;gt;field_site_logo-&amp;gt;entity);&lt;br&gt;      $rendered_image = $renderer-&amp;gt;render($image_render_array);&lt;br&gt;      $link_render_array = [&lt;br&gt;        '#type' =&amp;gt; 'link',&lt;br&gt;        '#url' =&amp;gt; Url::fromUri('entity:group/' . $group-&amp;gt;id()),&lt;br&gt;        '#title' =&amp;gt; $rendered_image,&lt;br&gt;      ];&lt;br&gt;      $group_item-&amp;gt;logo = $link_render_array;&lt;br&gt;    }&lt;br&gt;    $groups_to_render[] = $group_item;&lt;br&gt;  }&lt;br&gt;  return $groups_to_render;&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;As you can see in the example, what we do to print our image with a link is: first, prepare a render array to use the &lt;em&gt;image_style&lt;/em&gt; template. After that, we use the service &lt;em&gt;renderer&lt;/em&gt; from Drupal 8 (instead of Drupal_render from Drupal 7) to obtain an render type object, which will be assigned as a value for the &lt;em&gt;title&lt;/em&gt; of our link.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Defining our twig template&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Like Drupal 7, if we want to use our own templates inside a module, we need to define it, that is, make Drupal aware that such template exists. For that we’ll use &lt;em&gt;hook_theme()&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;/**&lt;br&gt; * Implements hook_theme().&lt;br&gt; */&lt;br&gt;function my_module_user_theme($existing, $type, $theme, $path) {&lt;br&gt;  return [&lt;br&gt;    'my_module_user_active_subsites' =&amp;gt; [&lt;br&gt;      'variables' =&amp;gt; [&lt;br&gt;        'groups' =&amp;gt; '',&lt;br&gt;      ],&lt;br&gt;    ],&lt;br&gt;  ];&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Creating our template&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;For our final step, we’ll proceed to create our twig template. In order to be recognized, our templates have to be placed in a specific location, with a specific naming convention.&lt;/p&gt;&lt;p&gt;Our templates have to be inside the folder called “templates” in the root of our module and like as I mentioned, have to follow the naming convention: template-name.html.twig. We’ll create the file &lt;em&gt;my-module-active-subsites.html.twig&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;This template will handle the format and will print the images belonging to our groups:&lt;/p&gt;&lt;pre&gt;{#&lt;br&gt;/**&lt;br&gt; * @file&lt;br&gt; * Template file my_module_active_subsites field&lt;br&gt; */&lt;br&gt;#}&lt;/pre&gt;&lt;pre&gt;&amp;lt;div class="container user-groups-container"&amp;gt;&lt;br&gt;   {% if groups is not empty %}&lt;br&gt;     {% for group in groups %}&lt;br&gt;        &amp;lt;div class="container user-groups-element" &amp;gt;&lt;br&gt;          {{ group.logo }}&lt;br&gt;        &amp;lt;/div&amp;gt;&lt;br&gt;     {% endfor %}&lt;br&gt;   {% endif %}&lt;br&gt;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p&gt;As you can see, Twig is very different from what we know before with PHP templates, but this does not mean is complicated. In my case, I used this documentation: &lt;a href="https://www.drupal.org/docs/8/theming/twig/comparison-of-phptemplate-and-twig-theming-paradigms"&gt;https://www.drupal.org/docs/8/theming/twig/comparison-of-phptemplate-and-twig-theming-paradigms&lt;/a&gt;, which is a comparative between what we used to do in PHP template and how we do it with Twig.&lt;/p&gt;&lt;p&gt;Pseudo fields in Drupal 8 -like in Drupal 7- are still a great resource that allows flexibility in the display of our entities. If we add templates in the mix, we can comply with any display requirement for our content. Just be aware that it depends on the type of display we need to use for our content.&lt;/p&gt;&lt;p&gt;Happy coding!&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.estudiomanati.com"&gt;&lt;strong&gt;&lt;em&gt;Manatí&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;em&gt; is a web consultancy firm from Costa Rica&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;, where we make websites strategically designed to help organization achieve goals.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Don’t miss out on projects, news and ideas from &lt;/em&gt;&lt;a href="https://www.estudiomanati.com"&gt;&lt;em&gt;Manatí&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Learn about &lt;/em&gt;&lt;a href="https://www.estudiomanati.com/what-we-do.html"&gt;&lt;em&gt;what we do&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, follow us on &lt;/em&gt;&lt;a href="https://medium.com/manati-web-agency"&gt;&lt;strong&gt;&lt;em&gt;medium&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;, &lt;/em&gt;&lt;a href="https://twitter.com/estudiomanati"&gt;&lt;strong&gt;&lt;em&gt;twitter&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt; and &lt;/em&gt;&lt;a href="https://twitter.com/estudiomanati"&gt;&lt;strong&gt;&lt;em&gt;facebook&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=8d02d083d2f" width="1" height="1"&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://medium.com/manati-web-agency/https-medium-com-manati-web-agency-drupal-8-pseudo-fields-templates-and-rendering-images-with-links-8d02d083d2f"&gt;Drupal 8: Pseudo fields, templates and rendering images with links.&lt;/a&gt; was originally published in &lt;a href="https://medium.com/manati-web-agency"&gt;MANATI | Agencia Web&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description><category>backend</category><category>drupal-8</category><category>php</category><category>web-development</category><guid>http://www.jaquerespeis.org/posts/manati-web-agencyhttps-medium-com-manati-web-agency-drupal-8-pseudo-fields-templates-and-rendering-images-with-links-8d02d083d2f/</guid><pubDate>Tue, 23 May 2017 22:05:01 GMT</pubDate></item><item><title>Drupal 8: Pseudocampos, templates y render de imágenes con links.</title><link>http://www.jaquerespeis.org/posts/manati-web-agencydrupal-8-pseudocampos-templates-y-render-de-imc3a1genes-con-links-40870e35970e/</link><dc:creator>JáquerEspeis</dc:creator><description>&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/800/1*i9Lxf4RqvuJbLRf426cb0g.png"&gt;&lt;figcaption&gt;Ilustración de &lt;a href="https://medium.com/u/685ec9b9459c"&gt;Lucy Sánchez&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;em&gt;Read this article in english:&lt;/em&gt; &lt;a href="https://medium.com/p/8d02d083d2f"&gt;&lt;strong&gt;Drupal 8: Pseudo fields, templates and rendering images with links&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Hace unos días atrás inicie el desarrollo de un nuevo sitio en Drupal 8. Este sitio ha llegado con una gran cantidad de retos interesantes puesto que muchas de las funcionalidades requeridas aún no son sencillas de implementar. En este momento hay muchos módulos &lt;em&gt;contrib que&lt;/em&gt; aun se encuentran en desarrollo, uno de estos módulos es: &lt;a href="https://www.drupal.org/project/group"&gt;&lt;em&gt;group&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Nuestro cliente requiere que cada usuario autenticado pueda ver los grupos a los que pertenece directamente desde su perfil. Esta funcionalidad tiene que realizase de manera tal que se pudiera ver solamente el logo del grupo, y este logo debe estar enlazado a la página del sitio. Investigué para buscar alternativas con &lt;em&gt;views&lt;/em&gt; u otros módulos contrib, pero la investigación no dio muchos frutos.&lt;/p&gt;&lt;p&gt;Opté por el desarrollo de algo &lt;em&gt;custom:&lt;/em&gt; elegí desarrollar un pseudocampo para los usuarios. Dicho campo utilizará un &lt;em&gt;template&lt;/em&gt; para imprimir dichos grupos.&lt;/p&gt;&lt;h4&gt;Manos a la obra.&lt;/h4&gt;&lt;p&gt;Primero necesitamos crear un pseudocampo. Recordemos que los pseudocampos son elementos que, al igual que un campo, podemos administrar desde la interfaz de despliegue de cada entidad, pero la diferencia radica en que este elemento solo tiene una función: mostrar información, a diferencia de un campo normal que muestra y almacena información brindada por los usuarios.&lt;/p&gt;&lt;p&gt;En drupal 8- como en drupal 7- necesitamos hacer uso de 2 hooks para hacer disponible nuestro pseudocampo para una entidad, estos son: &lt;em&gt;hook_entity_extra_field_info()&lt;/em&gt; y&lt;em&gt; hook_[ENTITY NAME]_view().&lt;/em&gt;&lt;/p&gt;&lt;h4&gt;hook_entity_extra_field_info().&lt;/h4&gt;&lt;p&gt;Indica a la entidad que ahora va a existir un nuevo elemento disponible para su despliegue. Para nuestro caso lo implementamos de la siguiente manera:&lt;/p&gt;&lt;pre&gt;/**&lt;br&gt; * Implements hook_entity_extra_field_info().&lt;br&gt; */&lt;br&gt;function my_module_entity_extra_field_info() {&lt;br&gt;  $extra = [];&lt;br&gt;  $extra['user']['user']['display']['my_mudule_active_subsites'] = array(&lt;br&gt;    'label' =&amp;gt; new TranslatableMarkup('Active subsites'),&lt;br&gt;    'description' =&amp;gt; new TranslatableMarkup('Show the current subscribed sites by one user'),&lt;br&gt;  );&lt;br&gt;  return $extra;&lt;br&gt;}&lt;/pre&gt;&lt;h4&gt;hook_[ENTITY NAME]_view()&lt;/h4&gt;&lt;p&gt;En este caso nos interesa usar &lt;em&gt;hook_user_view() &lt;/em&gt;porque que estamos trabajando con la entidad de tipo usuario. &lt;em&gt;hook_[ENTITY NAME]_view() &lt;/em&gt;básicamente se encarga de manejar el despliegue de cada uno de los elementos de una entidad dada. En este caso lo vamos a utilizar para dar forma a nuestro pseudocampo &lt;em&gt;my_mudule_active_subsites.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Para drupal 8, la implementación de este hook varía un poco en los parámetros que recibe, podemos encontrar más documentación aquí: &lt;a href="https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Entity%21entity.api.php/function/hook_entity_view/8.2.x"&gt;https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Entity%21entity.api.php/function/hook_entity_view/8.2.x&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;/**&lt;br&gt; * Implements hook_user_view().&lt;br&gt; */&lt;br&gt;function my_module_view(array &amp;amp;$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode, $langcode) {&lt;br&gt;  if ($view_mode === 'full') {&lt;br&gt;    if ($display-&amp;gt;getComponent('my_module_active_subsites')) {&lt;br&gt;      $groups = my_module_user_current_user_groups($entity);&lt;br&gt;      $groups_to_render = my_module_render_groups_images($groups);&lt;br&gt;      $build['my_module_user_active_subsites'] = [&lt;br&gt;        '#theme' =&amp;gt; 'my_module_active_subsites',&lt;br&gt;        '#groups' =&amp;gt; $groups_to_render,&lt;br&gt;      ];&lt;br&gt;    }&lt;br&gt;  }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Como podemos ver en el ejemplo, estamos usando la variable build que nos llega por referencia para asignar a nuestro pseudocampo el valor a mostrar. Nótese que creamos un nuevo índice dentro del arreglo de build que es un arreglo de render. Dentro de nuestro índice usamos #theme para indicar que vamos a hacer uso de un template, el cual definiremos más adelante y también hacemos uso de #groups que es una variable propia de nuestro template.&lt;/p&gt;&lt;p&gt;Ahora, un detalle importante: como se puede apreciar en nuestro ejemplo, se hace uso de 2 funciones para obtener tanto los grupos del usuario como los datos preprocesados listos para ser impresos por drupal. La función &lt;em&gt;my_module_user_current_user_groups() &lt;/em&gt;básicamente retorna un arreglo de entidades de tipo group, por lo cual no ahondaremos en ella. Por el contrario, sí entraremos en detalles con &lt;em&gt;my_module_render_groups_images().&lt;/em&gt;&lt;/p&gt;&lt;h4&gt;&lt;em&gt;my_module_render_groups_images()&lt;/em&gt;&lt;/h4&gt;&lt;p&gt;Esta función nació por la necesidad de que nuestras imágenes estén envueltas en un link, específicamente, un enlace a la entidad de tipo grupo. Lo resolvemos de la siguiente manera:&lt;/p&gt;&lt;pre&gt;/**&lt;br&gt; * Helper function to render the images with a specific image style.&lt;br&gt; *&lt;br&gt; * &lt;a href="http://twitter.com/param"&gt;@param&lt;/a&gt; array $groups&lt;br&gt; *   The entity groups with the images to render.&lt;br&gt; */&lt;br&gt;function my_module_render_groups_images(array $groups) {&lt;br&gt;  $groups_to_render = [];&lt;br&gt;  foreach ($groups as $group) {&lt;br&gt;    $group_item = new Stdclass();&lt;br&gt;    $image_id = $group-&amp;gt;field_site_logo-&amp;gt;target_id;&lt;br&gt;    if (!empty($image_id)) {&lt;br&gt;      $image_render_array = [&lt;br&gt;        '#theme' =&amp;gt; 'image_style',&lt;br&gt;        '#width' =&amp;gt; $group-&amp;gt;field_site_logo-&amp;gt;width,&lt;br&gt;        '#height' =&amp;gt; $group-&amp;gt;field_site_logo-&amp;gt;height,&lt;br&gt;        '#style_name' =&amp;gt; 'site_logo_user_profile',&lt;br&gt;        '#uri' =&amp;gt; $group-&amp;gt;field_site_logo-&amp;gt;entity-&amp;gt;uri-&amp;gt;value,&lt;br&gt;      ];&lt;br&gt;      $renderer = \Drupal::service('renderer');&lt;br&gt;      $renderer-&amp;gt;addCacheableDependency($image_render_array, $group-&amp;gt;field_site_logo-&amp;gt;entity);&lt;br&gt;      $rendered_image = $renderer-&amp;gt;render($image_render_array);&lt;br&gt;      $link_render_array = [&lt;br&gt;        '#type' =&amp;gt; 'link',&lt;br&gt;        '#url' =&amp;gt; Url::fromUri('entity:group/' . $group-&amp;gt;id()),&lt;br&gt;        '#title' =&amp;gt; $rendered_image,&lt;br&gt;      ];&lt;br&gt;      $group_item-&amp;gt;logo = $link_render_array;&lt;br&gt;    }&lt;br&gt;    $groups_to_render[] = $group_item;&lt;br&gt;  }&lt;br&gt;  return $groups_to_render;&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Como se puede observar en el ejemplo, lo que realizamos para imprimir nuestra imagen con link, fue: primero preparar un arreglo de render para hacer uso del template de &lt;em&gt;image_style&lt;/em&gt;. Luego usamos el servicio &lt;em&gt;renderer &lt;/em&gt;de drupal 8 (remplazo de &lt;em&gt;drupal_render&lt;/em&gt; en drupal 7) para obtener un objeto de tipo &lt;em&gt;renderer,&lt;/em&gt; el cual posteriormente será asignado como valor para el &lt;em&gt;title&lt;/em&gt; de nuestro link.&lt;/p&gt;&lt;h4&gt;Definiendo nuestro twig template.&lt;/h4&gt;&lt;p&gt;Al igual que en drupal 7, si queremos hacer uso de nuestro propio template en un módulo, debemos hacer la definición del mismo, osea, hacerle saber a Drupal que este template existe. Para esto hacemos uso del &lt;em&gt;hook_theme().&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;/**&lt;br&gt; * Implements hook_theme().&lt;br&gt; */&lt;br&gt;function my_module_user_theme($existing, $type, $theme, $path) {&lt;br&gt;  return [&lt;br&gt;    'my_module_user_active_subsites' =&amp;gt; [&lt;br&gt;      'variables' =&amp;gt; [&lt;br&gt;        'groups' =&amp;gt; '',&lt;br&gt;      ],&lt;br&gt;    ],&lt;br&gt;  ];&lt;br&gt;}&lt;/pre&gt;&lt;h4&gt;Creando nuestro template.&lt;/h4&gt;&lt;p&gt;Ahora, como paso final, procederemos a crear nuestro twig template. Para que nuestros templates sean reconocidos debemos colocarlos en una ubicación específica, siguiendo un formato de nombre específico.&lt;/p&gt;&lt;p&gt;Nuestros templates deben estar en una carpeta llamada “templates” en la raíz de nuestro módulo y como mencionamos, deben seguir el siguiente formato de nombre: nombre-template.html.twig. Para nuestro caso creamos el archivo: my-module-active-subsites.html.twig.&lt;/p&gt;&lt;p&gt;Este template se encargará de formatear e imprimir las imágenes pertenecientes a nuestros grupos:&lt;/p&gt;&lt;pre&gt;{#&lt;br&gt;/**&lt;br&gt; * &lt;a href="http://twitter.com/file"&gt;@file&lt;/a&gt;&lt;br&gt; * Template file my_module_active_subsites field&lt;br&gt; */&lt;br&gt;#}&lt;/pre&gt;&lt;pre&gt;&amp;lt;div class="container user-groups-container"&amp;gt;&lt;br&gt;   {% if groups is not empty %}&lt;br&gt;     {% for group in groups %}&lt;br&gt;        &amp;lt;div class="container user-groups-element" &amp;gt;&lt;br&gt;          {{ group.logo }}&lt;br&gt;        &amp;lt;/div&amp;gt;&lt;br&gt;     {% endfor %}&lt;br&gt;   {% endif %}&lt;br&gt;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p&gt;Como podemos observar twig es muy distinto de lo que conocíamos antes en los PHP templates, pero esto no significa que sea complicado. En mi caso me apoyé en esta documentación: &lt;a href="https://www.drupal.org/docs/8/theming/twig/comparison-of-phptemplate-and-twig-theming-paradigms"&gt;https://www.drupal.org/docs/8/theming/twig/comparison-of-phptemplate-and-twig-theming-paradigms,&lt;/a&gt; esta documentación da una comparación entre lo que antes hacíamos con PHP templates y cómo se hace ahora con twig.&lt;/p&gt;&lt;p&gt;Como pudimos ver, los pseudocampos de Drupal 8 al igual que en Drupal 7, siguen siendo un gran recurso que permite dar flexibilidad a nuestros despliegues de entidades. Si a esto le unimos templates, podemos cumplir con cualquier requerimiento de despliegue de nuestro contenido. Solo se debe recordar que el uso de los mismos depende del tipo del despliegue que queramos usar para nuestro contenido.&lt;/p&gt;&lt;p&gt;¡Feliz codificación!&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.estudiomanati.com/"&gt;&lt;strong&gt;&lt;em&gt;Manatí&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;em&gt; es una firma consultora web de origen costarricense&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;, donde hacemos sitios estratégicamente diseñados para llevar organizaciones a lograr objetivos.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;No se pierdan los proyectos, noticias e ideas de nosotros en Manatí. Conozca más sobre lo que hacemos, síganos en &lt;/em&gt;&lt;a href="https://medium.com/manati-web-agency"&gt;&lt;strong&gt;&lt;em&gt;medium&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;, &lt;/em&gt;&lt;a href="https://twitter.com/estudiomanati"&gt;&lt;strong&gt;&lt;em&gt;twitter&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt; y &lt;/em&gt;&lt;a href="https://twitter.com/estudiomanati"&gt;&lt;strong&gt;&lt;em&gt;facebook&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=40870e35970e" width="1" height="1"&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://medium.com/manati-web-agency/drupal-8-pseudocampos-templates-y-render-de-im%C3%A1genes-con-links-40870e35970e"&gt;Drupal 8: Pseudocampos, templates y render de imágenes con links.&lt;/a&gt; was originally published in &lt;a href="https://medium.com/manati-web-agency"&gt;MANATI | Agencia Web&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description><category>backend</category><category>drupal-8</category><category>php</category><category>web-development</category><guid>http://www.jaquerespeis.org/posts/manati-web-agencydrupal-8-pseudocampos-templates-y-render-de-imc3a1genes-con-links-40870e35970e/</guid><pubDate>Tue, 23 May 2017 22:05:01 GMT</pubDate></item></channel></rss>